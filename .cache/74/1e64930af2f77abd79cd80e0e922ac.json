{"id":"../node_modules/3id-did-provider/lib/keyring.js","dependencies":[{"name":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/keyring.js.map","includedInParent":true,"mtime":1642262883137},{"name":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/src/keyring.ts","includedInParent":true,"mtime":1642262883137},{"name":"/home/vitalpointai/projects/space-gems/package.json","includedInParent":true,"mtime":1642266346920},{"name":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/package.json","includedInParent":true,"mtime":1642262883137},{"name":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/.babelrc","includedInParent":true,"mtime":1642262883137},{"name":"@stablelib/x25519","loc":{"line":13,"column":25},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/keyring.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@stablelib/x25519/lib/x25519.js"},{"name":"@ethersproject/hdnode","loc":{"line":14,"column":25},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/keyring.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@ethersproject/hdnode/lib.esm/index.js"},{"name":"did-jwt","loc":{"line":15,"column":26},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/keyring.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/did-jwt/lib/index.module.js"},{"name":"@stablelib/random","loc":{"line":16,"column":25},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/keyring.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@stablelib/random/lib/random.js"},{"name":"dag-jose-utils","loc":{"line":17,"column":33},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/keyring.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/dag-jose-utils/lib/index.js"},{"name":"./utils","loc":{"line":18,"column":24},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/keyring.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/utils.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LATEST = void 0;\nconst x25519_1 = require(\"@stablelib/x25519\");\nconst hdnode_1 = require(\"@ethersproject/hdnode\");\nconst did_jwt_1 = require(\"did-jwt\");\nconst random_1 = require(\"@stablelib/random\");\nconst dag_jose_utils_1 = require(\"dag-jose-utils\");\nconst utils_1 = require(\"./utils\");\nexports.LATEST = 'latest';\nconst GENESIS = 'genesis';\nconst BASE_PATH = \"m/51073068'\";\nconst LEGACY_BASE_PATH = \"m/7696500'/0'/0'\";\nfunction deriveKeySet(seed, v03ID) {\n    const seedNode = hdnode_1.HDNode.fromSeed(seed);\n    let hdNode;\n    if (v03ID) {\n        hdNode = seedNode.derivePath(LEGACY_BASE_PATH);\n    }\n    else {\n        hdNode = seedNode.derivePath(BASE_PATH);\n    }\n    const signing = hdNode.derivePath('0');\n    const management = v03ID ? signing : hdNode.derivePath('1');\n    const encryption = x25519_1.generateKeyPairFromSeed(utils_1.hexToU8A(hdNode.derivePath('2').privateKey.slice(2)));\n    return {\n        seed,\n        publicKeys: {\n            signing: utils_1.hexToU8A(signing.publicKey.slice(2)),\n            management: utils_1.hexToU8A(management.publicKey.slice(2)),\n            encryption: encryption.publicKey,\n        },\n        secretKeys: {\n            signing: utils_1.hexToU8A(signing.privateKey.slice(2)),\n            management: utils_1.hexToU8A(management.privateKey.slice(2)),\n            encryption: encryption.secretKey,\n        },\n        v03ID,\n    };\n}\nclass Keyring {\n    constructor(seed, v03ID) {\n        this._keySets = {};\n        this._versionMap = {};\n        this._pastSeeds = [];\n        if (!seed) {\n            seed = random_1.randomBytes(32);\n        }\n        if (v03ID)\n            this._v03ID = v03ID;\n        this._versionMap[GENESIS] = exports.LATEST;\n        this._keySets[exports.LATEST] = deriveKeySet(seed, v03ID);\n        let encKid = utils_1.encodeKey(this._keySets[exports.LATEST].publicKeys.encryption, 'x25519').slice(-15);\n        this._versionMap[encKid] = exports.LATEST;\n        encKid = utils_1.encodeKey(this._keySets[exports.LATEST].publicKeys.management, 'secp256k1');\n        this._versionMap[encKid] = exports.LATEST;\n    }\n    get v03ID() {\n        return this._v03ID;\n    }\n    get seed() {\n        return this._keySets[exports.LATEST].seed;\n    }\n    get pastSeeds() {\n        return this._pastSeeds;\n    }\n    loadPastSeeds(pastSeeds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._pastSeeds = [...pastSeeds];\n            let version = exports.LATEST;\n            let jwe = pastSeeds.pop();\n            while (jwe) {\n                const decrypted = yield this.asymDecryptJWE(jwe, [], version);\n                version = Object.keys(decrypted).find((k) => k !== 'v03ID');\n                if (decrypted.v03ID) {\n                    this._v03ID = decrypted.v03ID;\n                    delete decrypted.v03ID;\n                    this._versionMap[GENESIS] = version;\n                }\n                this._keySets[version] = deriveKeySet(new Uint8Array(decrypted[version]), this._v03ID);\n                this._updateVersionMap(version, this._keySets[version]);\n                jwe = pastSeeds.pop();\n            }\n        });\n    }\n    _updateVersionMap(version, keySet) {\n        let encKid = utils_1.encodeKey(keySet.publicKeys.encryption, 'x25519').slice(-15);\n        this._versionMap[encKid] = version;\n        encKid = utils_1.encodeKey(keySet.publicKeys.management, 'secp256k1');\n        this._versionMap[encKid] = version;\n    }\n    generateNewKeys(prevVersion) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._keySets[prevVersion])\n                throw new Error('Key set version already exist');\n            this._updateVersionMap(prevVersion, this._keySets[exports.LATEST]);\n            this._keySets[prevVersion] = this._keySets[exports.LATEST];\n            this._keySets[exports.LATEST] = deriveKeySet(random_1.randomBytes(32));\n            this._updateVersionMap(exports.LATEST, this._keySets[exports.LATEST]);\n            const cleartext = { [prevVersion]: this._keySets[prevVersion].seed };\n            if (this._keySets[prevVersion].v03ID)\n                cleartext.v03ID = this._keySets[prevVersion].v03ID;\n            this._pastSeeds.push(yield this.asymEncryptJWE(cleartext));\n        });\n    }\n    getAsymDecrypter(fragments = [], version) {\n        if (!version) {\n            const fragmentWithKey = fragments.find((fragment) => this._versionMap[fragment]);\n            version = fragmentWithKey ? this._versionMap[fragmentWithKey] : exports.LATEST;\n        }\n        const key = this._keySets[version].secretKeys.encryption;\n        return did_jwt_1.x25519Decrypter(key);\n    }\n    asymDecryptJWE(jwe, kids, version) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return dag_jose_utils_1.decodeCleartext(yield did_jwt_1.decryptJWE(jwe, this.getAsymDecrypter(kids, version)));\n        });\n    }\n    asymEncryptJWE(cleartext, kid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const encrypter = did_jwt_1.x25519Encrypter(this.getEncryptionPublicKey(), kid);\n            return did_jwt_1.createJWE(dag_jose_utils_1.prepareCleartext(cleartext), [encrypter]);\n        });\n    }\n    getSigner(version = exports.LATEST) {\n        const keyset = this._keySets[version] || this._keySets[exports.LATEST];\n        return did_jwt_1.EllipticSigner(utils_1.u8aToHex(keyset.secretKeys.signing));\n    }\n    getKeyFragment(version = exports.LATEST, encKey = false) {\n        const keyset = this._keySets[version] || this._keySets[exports.LATEST];\n        if (encKey) {\n            return utils_1.encodeKey(keyset.publicKeys.encryption, 'x25519').slice(-15);\n        }\n        return utils_1.encodeKey(keyset.publicKeys.signing, 'secp256k1').slice(-15);\n    }\n    getMgmtSigner(pubKey) {\n        const keyset = this._keySets[this._versionMap[pubKey]].secretKeys;\n        if (!keyset)\n            throw new Error(`Key not found: ${pubKey}`);\n        return did_jwt_1.EllipticSigner(utils_1.u8aToHex(keyset.management));\n    }\n    getEncryptionPublicKey() {\n        return this._keySets[exports.LATEST].publicKeys.encryption;\n    }\n    get3idState(genesis) {\n        const keyVer = genesis ? this._versionMap[GENESIS] : exports.LATEST;\n        const keys = this._keySets[keyVer].publicKeys;\n        const signing = utils_1.encodeKey(keys.signing, 'secp256k1');\n        const encryption = utils_1.encodeKey(keys.encryption, 'x25519');\n        const state = {\n            metadata: { controllers: [`did:key:${utils_1.encodeKey(keys.management, 'secp256k1')}`] },\n            content: {\n                publicKeys: {\n                    [signing.slice(-15)]: signing,\n                    [encryption.slice(-15)]: encryption,\n                },\n            },\n        };\n        if (genesis) {\n            state.metadata.family = '3id';\n        }\n        if (this._keySets[keyVer].v03ID) {\n            state.metadata.deterministic = true;\n            delete state.content;\n        }\n        return state;\n    }\n}\nexports.default = Keyring;\n"},"sourceMaps":{"js":{"version":3,"file":"keyring.js","sourceRoot":"","sources":["../src/keyring.ts"],"names":[],"mappings":"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","sourcesContent":["import { generateKeyPairFromSeed } from '@stablelib/x25519'\nimport { HDNode } from '@ethersproject/hdnode'\nimport {\n  EllipticSigner,\n  Signer,\n  Decrypter,\n  x25519Decrypter,\n  x25519Encrypter,\n  createJWE,\n  decryptJWE,\n  JWE,\n} from 'did-jwt'\nimport { randomBytes } from '@stablelib/random'\nimport { prepareCleartext, decodeCleartext } from 'dag-jose-utils'\nimport { encodeKey, hexToU8A, u8aToHex } from './utils'\nimport type { StreamMetadata } from '@ceramicnetwork/common'\n\nexport const LATEST = 'latest'\nconst GENESIS = 'genesis'\nconst BASE_PATH = \"m/51073068'\"\nconst LEGACY_BASE_PATH = \"m/7696500'/0'/0'\"\n\nexport interface ThreeIdState {\n  metadata: StreamMetadata\n  content?: Record<string, any>\n}\n\nexport interface KeySet {\n  signing: Uint8Array\n  management: Uint8Array\n  encryption: Uint8Array\n}\n\ninterface FullKeySet {\n  seed: Uint8Array\n  publicKeys: KeySet\n  secretKeys: KeySet\n  v03ID?: string\n}\n\nfunction deriveKeySet(seed: Uint8Array, v03ID?: string): FullKeySet {\n  const seedNode = HDNode.fromSeed(seed)\n  let hdNode\n  if (v03ID) {\n    hdNode = seedNode.derivePath(LEGACY_BASE_PATH)\n  } else {\n    hdNode = seedNode.derivePath(BASE_PATH)\n  }\n  const signing = hdNode.derivePath('0')\n  // for v03ID the signing key is the management key\n  const management = v03ID ? signing : hdNode.derivePath('1')\n  const encryption = generateKeyPairFromSeed(hexToU8A(hdNode.derivePath('2').privateKey.slice(2)))\n  return {\n    seed,\n    publicKeys: {\n      signing: hexToU8A(signing.publicKey.slice(2)),\n      management: hexToU8A(management.publicKey.slice(2)),\n      encryption: encryption.publicKey,\n    },\n    secretKeys: {\n      signing: hexToU8A(signing.privateKey.slice(2)),\n      management: hexToU8A(management.privateKey.slice(2)),\n      encryption: encryption.secretKey,\n    },\n    v03ID,\n  }\n}\n\nexport default class Keyring {\n  // map from 3ID version to key set\n  protected _keySets: Record<string, FullKeySet> = {}\n  // map from kid to encryption key\n  protected _versionMap: Record<string, string> = {}\n  // encrypted old seeds\n  protected _pastSeeds: Array<JWE> = []\n  // v03ID if legacy 3ID\n  protected _v03ID?: string\n\n  constructor(seed?: Uint8Array, v03ID?: string) {\n    if (!seed) {\n      seed = randomBytes(32)\n    }\n    if (v03ID) this._v03ID = v03ID\n    this._versionMap[GENESIS] = LATEST\n    this._keySets[LATEST] = deriveKeySet(seed, v03ID)\n    let encKid = encodeKey(this._keySets[LATEST].publicKeys.encryption, 'x25519').slice(-15)\n    this._versionMap[encKid] = LATEST\n    encKid = encodeKey(this._keySets[LATEST].publicKeys.management, 'secp256k1')\n    this._versionMap[encKid] = LATEST\n  }\n\n  get v03ID(): string | undefined {\n    return this._v03ID\n  }\n\n  get seed(): Uint8Array {\n    return this._keySets[LATEST].seed\n  }\n\n  get pastSeeds(): Array<JWE> {\n    return this._pastSeeds\n  }\n\n  async loadPastSeeds(pastSeeds: Array<JWE>): Promise<void> {\n    // Store a copy of the pastSeeds\n    this._pastSeeds = [...pastSeeds]\n    // Decrypt each version with the version that came after it\n    let version: string = LATEST\n    let jwe = pastSeeds.pop()\n    while (jwe) {\n      const decrypted = await this.asymDecryptJWE(jwe, [], version)\n      version = Object.keys(decrypted).find((k) => k !== 'v03ID') as string\n      if (decrypted.v03ID) {\n        this._v03ID = decrypted.v03ID as string\n        delete decrypted.v03ID\n        this._versionMap[GENESIS] = version\n      }\n      this._keySets[version] = deriveKeySet(new Uint8Array(decrypted[version]), this._v03ID)\n      this._updateVersionMap(version, this._keySets[version])\n      jwe = pastSeeds.pop()\n    }\n  }\n\n  _updateVersionMap(version: string, keySet: FullKeySet): void {\n    let encKid = encodeKey(keySet.publicKeys.encryption, 'x25519').slice(-15)\n    this._versionMap[encKid] = version\n    encKid = encodeKey(keySet.publicKeys.management, 'secp256k1')\n    this._versionMap[encKid] = version\n  }\n\n  async generateNewKeys(prevVersion: string): Promise<void> {\n    if (this._keySets[prevVersion]) throw new Error('Key set version already exist')\n    // Map encryption kid, mgmt pub, and key set to prevVersion\n    this._updateVersionMap(prevVersion, this._keySets[LATEST])\n    // Store previous key set\n    this._keySets[prevVersion] = this._keySets[LATEST]\n    // Generate a new seed and derive key set\n    this._keySets[LATEST] = deriveKeySet(randomBytes(32))\n    // Add encryption kid and mgmt pub to map\n    this._updateVersionMap(LATEST, this._keySets[LATEST])\n    // Encrypt the previous seed to the new seed\n    const cleartext: Record<string, any> = { [prevVersion]: this._keySets[prevVersion].seed }\n    if (this._keySets[prevVersion].v03ID) cleartext.v03ID = this._keySets[prevVersion].v03ID\n    this._pastSeeds.push(await this.asymEncryptJWE(cleartext))\n  }\n\n  getAsymDecrypter(fragments: Array<string> = [], version?: string): Decrypter {\n    if (!version) {\n      const fragmentWithKey = fragments.find((fragment: string) => this._versionMap[fragment])\n      version = fragmentWithKey ? this._versionMap[fragmentWithKey] : LATEST\n    }\n    const key = this._keySets[version].secretKeys.encryption\n    return x25519Decrypter(key)\n  }\n\n  async asymDecryptJWE(\n    jwe: JWE,\n    kids: Array<string>,\n    version?: string\n  ): Promise<Record<string, any>> {\n    return decodeCleartext(await decryptJWE(jwe, this.getAsymDecrypter(kids, version)))\n  }\n\n  async asymEncryptJWE(cleartext: Record<string, any>, kid?: string): Promise<JWE> {\n    const encrypter = x25519Encrypter(this.getEncryptionPublicKey(), kid)\n    return createJWE(prepareCleartext(cleartext), [encrypter])\n  }\n\n  getSigner(version: string = LATEST): Signer {\n    // If we get an unknown version it's the latest\n    // since we only store the version after a key rotation.\n    const keyset = this._keySets[version] || this._keySets[LATEST]\n    return EllipticSigner(u8aToHex(keyset.secretKeys.signing))\n  }\n\n  getKeyFragment(version: string = LATEST, encKey = false): string {\n    // If we get an unknown version it's the latest\n    // since we only store the version after a key rotation.\n    const keyset = this._keySets[version] || this._keySets[LATEST]\n    if (encKey) {\n      return encodeKey(keyset.publicKeys.encryption, 'x25519').slice(-15)\n    }\n    return encodeKey(keyset.publicKeys.signing, 'secp256k1').slice(-15)\n  }\n\n  getMgmtSigner(pubKey: string): Signer {\n    const keyset = this._keySets[this._versionMap[pubKey]].secretKeys\n    if (!keyset) throw new Error(`Key not found: ${pubKey}`)\n    return EllipticSigner(u8aToHex(keyset.management))\n  }\n\n  getEncryptionPublicKey(): Uint8Array {\n    return this._keySets[LATEST].publicKeys.encryption\n  }\n\n  get3idState(genesis?: boolean): ThreeIdState {\n    const keyVer = genesis ? this._versionMap[GENESIS] : LATEST\n    const keys = this._keySets[keyVer].publicKeys\n    const signing = encodeKey(keys.signing, 'secp256k1')\n    const encryption = encodeKey(keys.encryption, 'x25519')\n    // use the last 12 chars as key id\n    const state: ThreeIdState = {\n      metadata: { controllers: [`did:key:${encodeKey(keys.management, 'secp256k1')}`] },\n      content: {\n        publicKeys: {\n          [signing.slice(-15)]: signing,\n          [encryption.slice(-15)]: encryption,\n        },\n      },\n    }\n    if (genesis) {\n      state.metadata.family = '3id'\n    }\n    if (this._keySets[keyVer].v03ID) {\n      state.metadata.deterministic = true\n      delete state.content\n    }\n    return state\n  }\n}\n"]}},"error":null,"hash":"1c136a59a10d5ffc1aaa98ef2d8e1b5e","cacheData":{"env":{}}}