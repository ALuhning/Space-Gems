{"id":"../node_modules/@ceramicnetwork/common/lib/utils/stream-utils.js","dependencies":[{"name":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/lib/utils/stream-utils.js.map","includedInParent":true,"mtime":1642247367864},{"name":"/home/vitalpointai/projects/space-gems/package.json","includedInParent":true,"mtime":1642266346920},{"name":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/package.json","includedInParent":true,"mtime":1642247367864},{"name":"cids","loc":{"line":26,"column":39},"parent":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/lib/utils/stream-utils.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/cids/src/index.js"},{"name":"lodash.clonedeep","loc":{"line":27,"column":51},"parent":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/lib/utils/stream-utils.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/lodash.clonedeep/index.js"},{"name":"uint8arrays","loc":{"line":28,"column":33},"parent":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/lib/utils/stream-utils.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/uint8arrays/index.js"},{"name":"../stream","loc":{"line":29,"column":25},"parent":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/lib/utils/stream-utils.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/lib/stream.js"},{"name":"@ceramicnetwork/streamid","loc":{"line":30,"column":27},"parent":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/lib/utils/stream-utils.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/streamid/lib/index.js"}],"generated":{"js":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamUtils = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\nconst u8a = __importStar(require(\"uint8arrays\"));\nconst stream_1 = require(\"../stream\");\nconst streamid_1 = require(\"@ceramicnetwork/streamid\");\nclass StreamUtils {\n    static streamIdFromState(state) {\n        return new streamid_1.StreamID(state.type, state.log[0].cid);\n    }\n    static serializeCommit(commit) {\n        const cloned = lodash_clonedeep_1.default(commit);\n        if (StreamUtils.isSignedCommitContainer(cloned)) {\n            cloned.jws.link = cloned.jws.link.toString();\n            cloned.linkedBlock = u8a.toString(cloned.linkedBlock, 'base64');\n            return cloned;\n        }\n        if (StreamUtils.isSignedCommit(commit)) {\n            cloned.link = cloned.link.toString();\n        }\n        if (StreamUtils.isAnchorCommit(commit)) {\n            cloned.proof = cloned.proof.toString();\n        }\n        if (cloned.id) {\n            cloned.id = cloned.id.toString();\n        }\n        if (cloned.prev) {\n            cloned.prev = cloned.prev.toString();\n        }\n        return cloned;\n    }\n    static deserializeCommit(commit) {\n        const cloned = lodash_clonedeep_1.default(commit);\n        if (StreamUtils.isSignedCommitContainer(cloned)) {\n            cloned.jws.link = new cids_1.default(cloned.jws.link);\n            cloned.linkedBlock = u8a.fromString(cloned.linkedBlock, 'base64');\n            return cloned;\n        }\n        if (StreamUtils.isSignedCommit(cloned)) {\n            cloned.link = new cids_1.default(cloned.link);\n        }\n        if (StreamUtils.isAnchorCommit(cloned)) {\n            cloned.proof = new cids_1.default(cloned.proof);\n        }\n        if (cloned.id) {\n            cloned.id = new cids_1.default(cloned.id);\n        }\n        if (cloned.prev) {\n            cloned.prev = new cids_1.default(cloned.prev);\n        }\n        return cloned;\n    }\n    static serializeState(state) {\n        const cloned = lodash_clonedeep_1.default(state);\n        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: entry.cid.toString() }));\n        if (cloned.anchorStatus != null) {\n            cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n        }\n        if (cloned.anchorScheduledFor != null) {\n            cloned.anchorScheduledFor = new Date(cloned.anchorScheduledFor).toISOString();\n        }\n        if (cloned.anchorProof != null) {\n            cloned.anchorProof.txHash = cloned.anchorProof.txHash.toString();\n            cloned.anchorProof.root = cloned.anchorProof.root.toString();\n        }\n        if (cloned.lastAnchored != null) {\n            cloned.lastAnchored = cloned.lastAnchored.toString();\n        }\n        cloned.doctype = streamid_1.StreamType.nameByCode(cloned.type);\n        return cloned;\n    }\n    static deserializeState(state) {\n        const cloned = lodash_clonedeep_1.default(state);\n        if (cloned.doctype) {\n            cloned.type = streamid_1.StreamType.codeByName(cloned.doctype);\n            delete cloned.doctype;\n        }\n        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: new cids_1.default(entry.cid) }));\n        if (cloned.anchorProof) {\n            cloned.anchorProof.txHash = new cids_1.default(cloned.anchorProof.txHash);\n            cloned.anchorProof.root = new cids_1.default(cloned.anchorProof.root);\n        }\n        let showScheduledFor = true;\n        if (cloned.anchorStatus) {\n            cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];\n            showScheduledFor =\n                cloned.anchorStatus !== stream_1.AnchorStatus.FAILED && cloned.anchorStatus !== stream_1.AnchorStatus.ANCHORED;\n        }\n        if (cloned.anchorScheduledFor) {\n            if (showScheduledFor) {\n                cloned.anchorScheduledFor = Date.parse(cloned.anchorScheduledFor);\n            }\n            else {\n                delete cloned.anchorScheduledFor;\n            }\n        }\n        if (cloned.lastAnchored) {\n            cloned.lastAnchored = new cids_1.default(cloned.lastAnchored);\n        }\n        return cloned;\n    }\n    static statesEqual(state1, state2) {\n        return (JSON.stringify(StreamUtils.serializeState(state1)) ===\n            JSON.stringify(StreamUtils.serializeState(state2)));\n    }\n    static isStateSupersetOf(state, base) {\n        if (state.log.length < base.log.length) {\n            return false;\n        }\n        for (const i in base.log) {\n            if (!state.log[i].cid.equals(base.log[i].cid)) {\n                return false;\n            }\n        }\n        if (state.anchorStatus != base.anchorStatus) {\n            return false;\n        }\n        return true;\n    }\n    static async convertCommitToSignedCommitContainer(commit, ipfs) {\n        if (StreamUtils.isSignedCommit(commit)) {\n            const block = await ipfs.block.get(commit.link);\n            return {\n                jws: commit,\n                linkedBlock: block.data,\n            };\n        }\n        return commit;\n    }\n    static isSignedCommitContainer(commit) {\n        return commit && commit.jws !== undefined;\n    }\n    static isSignedCommit(commit) {\n        return commit && commit.link !== undefined;\n    }\n    static isAnchorCommit(commit) {\n        return commit && commit.proof !== undefined;\n    }\n    static isSignedCommitData(commitData) {\n        return commitData && commitData.envelope !== undefined;\n    }\n    static isAnchorCommitData(commitData) {\n        return commitData && commitData.proof !== undefined;\n    }\n}\nexports.StreamUtils = StreamUtils;\n"},"sourceMaps":{"js":{"version":3,"file":"stream-utils.js","sourceRoot":"","sources":["../../src/utils/stream-utils.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"27529abe3f5883877621a94ae5682158","cacheData":{"env":{}}}