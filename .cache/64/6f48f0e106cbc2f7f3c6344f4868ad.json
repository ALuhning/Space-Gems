{"id":"../node_modules/3id-did-provider/lib/three-idx.js","dependencies":[{"name":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js.map","includedInParent":true,"mtime":1642262883137},{"name":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/src/three-idx.ts","includedInParent":true,"mtime":1642262883137},{"name":"/home/vitalpointai/projects/space-gems/package.json","includedInParent":true,"mtime":1642266346920},{"name":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/package.json","includedInParent":true,"mtime":1642262883137},{"name":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/.babelrc","includedInParent":true,"mtime":1642262883137},{"name":"@ceramicnetwork/common","loc":{"line":16,"column":25},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/common/lib/index.js"},{"name":"@ceramicnetwork/stream-tile","loc":{"line":17,"column":30},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/stream-tile/lib/index.js"},{"name":"@ceramicnetwork/http-client","loc":{"line":18,"column":46},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/http-client/lib/ceramic-http-client.js"},{"name":"@ceramicstudio/idx-constants","loc":{"line":19,"column":32},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicstudio/idx-constants/dist/idx-constants.esm.js"},{"name":"cids","loc":{"line":20,"column":39},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/cids/src/index.js"},{"name":"key-did-resolver","loc":{"line":21,"column":51},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/key-did-resolver/lib/index.js"},{"name":"@ceramicnetwork/3id-did-resolver","loc":{"line":22,"column":52},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/@ceramicnetwork/3id-did-resolver/lib/index.js"},{"name":"did-resolver","loc":{"line":23,"column":31},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/did-resolver/lib/resolver.module.js"},{"name":"dids","loc":{"line":24,"column":23},"parent":"/home/vitalpointai/projects/space-gems/node_modules/3id-did-provider/lib/three-idx.js","resolved":"/home/vitalpointai/projects/space-gems/node_modules/dids/lib/index.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ThreeIDX = void 0;\nconst common_1 = require(\"@ceramicnetwork/common\");\nconst stream_tile_1 = require(\"@ceramicnetwork/stream-tile\");\nconst http_client_1 = __importDefault(require(\"@ceramicnetwork/http-client\"));\nconst idx_constants_1 = require(\"@ceramicstudio/idx-constants\");\nconst cids_1 = __importDefault(require(\"cids\"));\nconst key_did_resolver_1 = __importDefault(require(\"key-did-resolver\"));\nconst _3id_did_resolver_1 = __importDefault(require(\"@ceramicnetwork/3id-did-resolver\"));\nconst did_resolver_1 = require(\"did-resolver\");\nconst dids_1 = require(\"dids\");\nconst KEYCHAIN_DEF = idx_constants_1.definitions.threeIdKeychain;\nconst IDX = 'IDX';\nconst { IdentityIndex, ThreeIdKeychain } = idx_constants_1.schemas;\nconst isLegacyDid = (didId) => {\n    try {\n        new cids_1.default(didId);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nclass ThreeIDX {\n    constructor(ceramic) {\n        this.ceramic = ceramic || new http_client_1.default();\n        this.docs = {};\n        this._subscriptionSet = new common_1.SubscriptionSet();\n    }\n    setDIDProvider(provider) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const keyDidResolver = key_did_resolver_1.default.getResolver();\n            const threeIdResolver = _3id_did_resolver_1.default.getResolver(this.ceramic);\n            const resolver = new did_resolver_1.Resolver(Object.assign(Object.assign({}, threeIdResolver), keyDidResolver));\n            const did = new dids_1.DID({ provider, resolver });\n            yield did.authenticate();\n            yield this.ceramic.setDID(did);\n        });\n    }\n    setV03ID(did) {\n        this._v03ID = did;\n    }\n    get id() {\n        return this._v03ID || `did:3:${this.docs.threeId.id.baseID.toString()}`;\n    }\n    create3idDoc(docParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.docs.threeId = yield stream_tile_1.TileDocument.create(this.ceramic, docParams.content, docParams.metadata, {\n                anchor: false,\n                publish: false,\n            });\n            this._subscriptionSet.add(this.docs.threeId.subscribe());\n        });\n    }\n    get3idVersion() {\n        const anchorCommitIds = this.docs.threeId.anchorCommitIds;\n        const docId = anchorCommitIds[anchorCommitIds.length - 1];\n        return docId ? docId.commit.toString() : '0';\n    }\n    loadDoc(name, controller, family) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stream = yield stream_tile_1.TileDocument.create(this.ceramic, null, { controllers: [controller], family: family, deterministic: true }, { anchor: false, publish: false });\n            this.docs[name] = stream;\n            this._subscriptionSet.add(stream.subscribe());\n            return stream;\n        });\n    }\n    createAuthLinkUpdate({ did }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const didString = did.id;\n            const tile = yield this.loadDoc(didString, didString, 'authLink');\n            yield this.ceramic.pin.add(tile.id);\n            const commit = yield tile.makeCommit({ did }, { did: this.id });\n            return {\n                commit: commit,\n                docid: tile.id,\n                did: didString,\n            };\n        });\n    }\n    applyAuthLinkUpdate({ docid, commit, did }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.docs[did].content !== this.id) {\n                yield this.ceramic.applyCommit(docid, commit);\n                yield this.docs[did].sync();\n            }\n        });\n    }\n    createIDX(newEntry) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const docUpdatePromise = newEntry ? this.createAuthLinkUpdate(newEntry) : Promise.resolve(null);\n            yield Promise.all([\n                this.loadDoc(KEYCHAIN_DEF, this.id, KEYCHAIN_DEF),\n                this.loadDoc('idx', this.id, IDX),\n            ]);\n            yield Promise.all([\n                this.pinAllDocs(),\n                this.updateKeychainDoc(newEntry === null || newEntry === void 0 ? void 0 : newEntry.mapEntry),\n                this.addKeychainToIDX(),\n            ]);\n            const docUpdate = yield docUpdatePromise;\n            if (docUpdate) {\n                yield this.applyAuthLinkUpdate(docUpdate);\n            }\n        });\n    }\n    loadIDX(authDid) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loadDoc(authDid, authDid, 'authLink');\n            const { did } = this.docs[authDid].content;\n            if (!did)\n                return null;\n            yield this.loadAllDocs(did);\n            const { authMap, pastSeeds } = this.docs[KEYCHAIN_DEF].content;\n            return {\n                seed: (_a = authMap[authDid]) === null || _a === void 0 ? void 0 : _a.data,\n                pastSeeds,\n            };\n        });\n    }\n    loadAllDocs(did) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all([\n                this.load3IDDoc(did),\n                this.loadDoc(KEYCHAIN_DEF, did, KEYCHAIN_DEF),\n                this.loadDoc('idx', did, IDX),\n            ]);\n        });\n    }\n    load3IDDoc(did) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const id = did.split(':')[2];\n            if (isLegacyDid(id)) {\n                this._v03ID = did;\n            }\n            else {\n                this.docs.threeId = yield this.ceramic.loadStream(id);\n                this._subscriptionSet.add(this.docs.threeId.subscribe());\n            }\n        });\n    }\n    addAuthEntries(newEntries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkDocUpdatesPromise = Promise.all(newEntries.map(this.createAuthLinkUpdate.bind(this)));\n            const { authMap, pastSeeds } = this.docs[KEYCHAIN_DEF].content;\n            const newAuthEntries = newEntries.reduce((acc, { mapEntry }) => Object.assign(acc, mapEntry), {});\n            Object.assign(authMap, newAuthEntries);\n            yield this.updateKeychainDoc(authMap, pastSeeds);\n            yield Promise.all((yield linkDocUpdatesPromise).map(this.applyAuthLinkUpdate.bind(this)));\n        });\n    }\n    getAuthMap() {\n        if (!this.docs[KEYCHAIN_DEF] || !this.docs[KEYCHAIN_DEF].content.authMap)\n            return {};\n        return this.docs[KEYCHAIN_DEF].content.authMap;\n    }\n    pinAllDocs() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all(Object.values(this.docs).map((doc) => __awaiter(this, void 0, void 0, function* () {\n                yield this.ceramic.pin.add(doc.id);\n            })));\n        });\n    }\n    addKeychainToIDX() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const content = this.docs.idx.content;\n            if (!content || !content[KEYCHAIN_DEF]) {\n                const nextContent = Object.assign(content || {}, {\n                    [KEYCHAIN_DEF]: this.docs[KEYCHAIN_DEF].id.toUrl(),\n                });\n                const nextMetadata = this.docs.idx.metadata.schema ? undefined : { schema: IdentityIndex };\n                yield this.docs.idx.update(nextContent, nextMetadata);\n            }\n        });\n    }\n    updateKeychainDoc(authMap = {}, pastSeeds = []) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Object.keys(authMap).length !== 0) {\n                const update = { content: { authMap, pastSeeds } };\n                if (!this.docs[KEYCHAIN_DEF].metadata.schema) {\n                    update.metadata = { schema: ThreeIdKeychain };\n                }\n                yield this.docs[KEYCHAIN_DEF].update(update.content, update.metadata);\n                yield this.docs[KEYCHAIN_DEF].sync();\n            }\n        });\n    }\n    rotateKeys(threeIdState, pastSeeds, authMap) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!threeIdState.content)\n                throw new Error('Content has to be defined');\n            const currentController = this.docs.threeId.controllers[0];\n            const didKey = new Proxy(this.ceramic.did, {\n                get(target, prop, receiver) {\n                    if (prop === 'createJWS') {\n                        return (payload, options = {}) => {\n                            return target.createJWS(payload, Object.assign({}, options, { did: currentController }));\n                        };\n                    }\n                    else {\n                        return Reflect.get(target, prop, receiver);\n                    }\n                },\n            });\n            const originalDid = this.ceramic.did;\n            this.ceramic.did = didKey;\n            yield this.docs.threeId.update(Object.assign(Object.assign({}, this.docs.threeId.content), { publicKeys: threeIdState.content.publicKeys }), threeIdState.metadata);\n            this.ceramic.did = originalDid;\n            yield Promise.all([this.updateKeychainDoc(authMap, pastSeeds), this.pinAllDocs()]);\n        });\n    }\n}\nexports.ThreeIDX = ThreeIDX;\n"},"sourceMaps":{"js":{"version":3,"file":"three-idx.js","sourceRoot":"","sources":["../src/three-idx.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CeramicApi, CeramicCommit } from '@ceramicnetwork/common'\nimport { SubscriptionSet } from '@ceramicnetwork/common'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport CeramicClient from '@ceramicnetwork/http-client'\nimport { definitions, schemas } from '@ceramicstudio/idx-constants'\nimport CID from 'cids'\nimport KeyDidResolver from 'key-did-resolver'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport { Resolver } from 'did-resolver'\nimport { CreateJWSOptions, DID } from 'dids'\n\nimport type { DidProvider } from './did-provider'\nimport type { ThreeIdState } from './keyring'\nimport type { JWE } from 'did-jwt'\nimport type { StreamID } from '@ceramicnetwork/streamid'\n\nconst KEYCHAIN_DEF = definitions.threeIdKeychain\nconst IDX = 'IDX'\nconst { IdentityIndex, ThreeIdKeychain } = schemas\n\nconst isLegacyDid = (didId: string): boolean => {\n  try {\n    new CID(didId)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport interface EncData {\n  jwe?: JWE\n}\n\nexport interface EncKeyMaterial {\n  seed: EncData\n  pastSeeds: Array<JWE>\n}\n\nexport interface AuthEntry {\n  data: EncData\n  id: EncData\n}\n\nexport interface AuthMap {\n  [did: string]: AuthEntry\n}\n\nexport interface NewAuthEntry {\n  mapEntry: AuthMap\n  did: DID\n}\n\ninterface AuthLinkDocUpdate {\n  commit: CeramicCommit\n  docid: StreamID\n  did: string\n}\n\nexport class ThreeIDX {\n  public docs: Record<string, TileDocument>\n  public ceramic: CeramicApi\n  protected _v03ID?: string\n  protected _subscriptionSet: SubscriptionSet\n\n  constructor(ceramic?: CeramicApi) {\n    this.ceramic = ceramic || new CeramicClient()\n    this.docs = {}\n    this._subscriptionSet = new SubscriptionSet()\n  }\n\n  async setDIDProvider(provider: DidProvider): Promise<void> {\n    const keyDidResolver = KeyDidResolver.getResolver()\n    const threeIdResolver = ThreeIdResolver.getResolver(this.ceramic)\n    const resolver = new Resolver({\n      ...threeIdResolver,\n      ...keyDidResolver,\n    })\n    const did = new DID({ provider, resolver })\n    await did.authenticate()\n    await this.ceramic.setDID(did)\n  }\n\n  setV03ID(did: string): void {\n    this._v03ID = did\n  }\n\n  get id(): string {\n    return this._v03ID || `did:3:${this.docs.threeId.id.baseID.toString()}`\n  }\n\n  async create3idDoc(docParams: ThreeIdState): Promise<void> {\n    this.docs.threeId = await TileDocument.create(\n      this.ceramic,\n      docParams.content,\n      docParams.metadata,\n      {\n        anchor: false,\n        publish: false,\n      }\n    )\n    this._subscriptionSet.add(this.docs.threeId.subscribe())\n  }\n\n  get3idVersion(): string {\n    const anchorCommitIds = this.docs.threeId.anchorCommitIds\n    const docId = anchorCommitIds[anchorCommitIds.length - 1]\n    return docId ? docId.commit.toString() : '0'\n  }\n\n  async loadDoc(name: string, controller: string, family: string): Promise<TileDocument> {\n    const stream = await TileDocument.create<Record<string, any>>(\n      this.ceramic,\n      null,\n      { controllers: [controller], family: family, deterministic: true },\n      { anchor: false, publish: false }\n    )\n    this.docs[name] = stream\n    this._subscriptionSet.add(stream.subscribe())\n    return stream\n  }\n\n  async createAuthLinkUpdate({ did }: NewAuthEntry): Promise<AuthLinkDocUpdate> {\n    const didString = did.id\n    const tile = await this.loadDoc(didString, didString, 'authLink')\n    await this.ceramic.pin.add(tile.id)\n    const commit = await tile.makeCommit({ did }, { did: this.id })\n    return {\n      commit: commit,\n      docid: tile.id,\n      did: didString,\n    }\n  }\n\n  async applyAuthLinkUpdate({ docid, commit, did }: AuthLinkDocUpdate): Promise<void> {\n    // @ts-ignore\n    if (this.docs[did].content !== this.id) {\n      await this.ceramic.applyCommit(docid, commit)\n      await this.docs[did].sync()\n    }\n  }\n\n  /**\n   * Create a new IDX structure that has a given authEntry in it's keychain.\n   */\n  async createIDX(newEntry?: NewAuthEntry): Promise<void> {\n    const docUpdatePromise = newEntry ? this.createAuthLinkUpdate(newEntry) : Promise.resolve(null)\n    // eslint-disable-next-line prettier/prettier\n    await Promise.all([\n      this.loadDoc(KEYCHAIN_DEF, this.id, KEYCHAIN_DEF),\n      this.loadDoc('idx', this.id, IDX),\n    ])\n    // eslint-disable-next-line prettier/prettier\n    await Promise.all([\n      this.pinAllDocs(),\n      this.updateKeychainDoc(newEntry?.mapEntry),\n      this.addKeychainToIDX(),\n    ])\n    // Only update the link document after the keychain have been updated.\n    const docUpdate = await docUpdatePromise\n    if (docUpdate) {\n      await this.applyAuthLinkUpdate(docUpdate)\n    }\n  }\n\n  /**\n   * Returns the encrypted JWE for the given authLink\n   */\n  async loadIDX(authDid: string): Promise<EncKeyMaterial | null> {\n    await this.loadDoc(authDid, authDid, 'authLink')\n    const { did } = this.docs[authDid].content\n    if (!did) return null\n    await this.loadAllDocs(did)\n    const { authMap, pastSeeds } = this.docs[KEYCHAIN_DEF].content\n    return {\n      seed: authMap[authDid]?.data,\n      pastSeeds,\n    } as EncKeyMaterial\n  }\n\n  async loadAllDocs(did: string): Promise<void> {\n    // eslint-disable-next-line prettier/prettier\n    await Promise.all([\n      this.load3IDDoc(did),\n      this.loadDoc(KEYCHAIN_DEF, did, KEYCHAIN_DEF),\n      this.loadDoc('idx', did, IDX),\n    ])\n  }\n\n  async load3IDDoc(did: string): Promise<void> {\n    const id = did.split(':')[2]\n    if (isLegacyDid(id)) {\n      // we have to load the document later when keys are loaded\n      this._v03ID = did\n    } else {\n      this.docs.threeId = await this.ceramic.loadStream(id)\n      this._subscriptionSet.add(this.docs.threeId.subscribe())\n    }\n  }\n\n  /**\n   * Adds a new AuthEntries to the Auth keychain.\n   */\n  async addAuthEntries(newEntries: Array<NewAuthEntry>): Promise<void> {\n    const linkDocUpdatesPromise = Promise.all(newEntries.map(this.createAuthLinkUpdate.bind(this)))\n    const { authMap, pastSeeds } = this.docs[KEYCHAIN_DEF].content\n    const newAuthEntries = newEntries.reduce(\n      (acc, { mapEntry }) => Object.assign(acc, mapEntry),\n      {}\n    )\n    Object.assign(authMap, newAuthEntries)\n    await this.updateKeychainDoc(authMap, pastSeeds)\n    await Promise.all((await linkDocUpdatesPromise).map(this.applyAuthLinkUpdate.bind(this)))\n  }\n\n  /**\n   * Returns all public keys that is in the auth keychain.\n   */\n  getAuthMap(): AuthMap {\n    if (!this.docs[KEYCHAIN_DEF] || !this.docs[KEYCHAIN_DEF].content.authMap) return {}\n    return this.docs[KEYCHAIN_DEF].content.authMap as AuthMap\n  }\n\n  async pinAllDocs(): Promise<void> {\n    await Promise.all(\n      Object.values(this.docs).map(async (doc) => {\n        await this.ceramic.pin.add(doc.id)\n      })\n    )\n  }\n\n  async addKeychainToIDX(): Promise<void> {\n    const content = this.docs.idx.content\n    if (!content || !content[KEYCHAIN_DEF]) {\n      const nextContent = Object.assign(content || {}, {\n        [KEYCHAIN_DEF]: this.docs[KEYCHAIN_DEF].id.toUrl(),\n      })\n      const nextMetadata = this.docs.idx.metadata.schema ? undefined : { schema: IdentityIndex }\n      await this.docs.idx.update(nextContent, nextMetadata)\n    }\n  }\n\n  async updateKeychainDoc(authMap: AuthMap = {}, pastSeeds: Array<JWE> = []): Promise<void> {\n    if (Object.keys(authMap).length !== 0) {\n      const update: Record<string, any> = { content: { authMap, pastSeeds } }\n      if (!this.docs[KEYCHAIN_DEF].metadata.schema) {\n        update.metadata = { schema: ThreeIdKeychain }\n      }\n      await this.docs[KEYCHAIN_DEF].update(update.content, update.metadata)\n      await this.docs[KEYCHAIN_DEF].sync()\n    }\n  }\n\n  /**\n   * Preform a key rotation.\n   * Will update the keys in the 3id document, and create a new 3ID keychain\n   * with the given authEntries.\n   */\n  async rotateKeys(\n    threeIdState: ThreeIdState,\n    pastSeeds: Array<JWE>,\n    authMap: AuthMap\n  ): Promise<void> {\n    if (!threeIdState.content) throw new Error('Content has to be defined')\n    const currentController = this.docs.threeId.controllers[0]\n    // Sign an update to 3ID document with did:key\n    const didKey = new Proxy(this.ceramic.did!, {\n      get(target: DID, prop: string | symbol, receiver?: any): any {\n        // Only intercept ::createJWS function. Make it sign with the current controller.\n        if (prop === 'createJWS') {\n          return <T = any>(payload: T, options: CreateJWSOptions = {}) => {\n            return target.createJWS(payload, Object.assign({}, options, { did: currentController }))\n          }\n        } else {\n          // Idiomatic way to fall back to the original method/property.\n          return Reflect.get(target, prop, receiver)\n        }\n      },\n    })\n    const originalDid = this.ceramic.did\n    this.ceramic.did = didKey\n    // Rotate keys in 3ID document and update keychain\n    await this.docs.threeId.update(\n      {\n        ...this.docs.threeId.content,\n        publicKeys: threeIdState.content.publicKeys,\n      },\n      threeIdState.metadata\n    )\n    this.ceramic.did = originalDid\n    await Promise.all([this.updateKeychainDoc(authMap, pastSeeds), this.pinAllDocs()])\n  }\n}\n"]}},"error":null,"hash":"c83101dfc40aad6046123b5f54207285","cacheData":{"env":{}}}